@startuml

    namespace de.tk.tkapp.rest.api.handler {

        abstract class SomethingsApiService {
            {abstract} +add(Something, SecurityContext): Response
            {abstract} +findAll(SecurityContext): Response
            {abstract} +findById(Long, SecurityContext): Response
            {abstract} +remove(Something, SecurityContext): Response
            {abstract} +update(Something, SecurityContext): Response
        }

        class ApiResponseMessage {
            {static} +ERROR: int
            {static} +WARNING: int
            {static} +INFO: int
            {static} +OK: int
            {static} +TOO_BUSY: int
            +ApiResponseMessage()
            +ApiResponseMessage(int, String)
            +getCode(): int
            +setCode(int): void
            +getType(): String
            +setType(String): void
            +getMessage(): String
            +setMessage(String): void
        }

        class ApiOriginFilter {
            +doFilter(ServletRequest, ServletResponse, FilterChain): void
            +destroy(): void
            +init(FilterConfig): void
        }

        class NotFoundException {
            +NotFoundException(int, String)
        }

        class SomethingsApi {
            +add(Something, SecurityContext): Response
            +findAll(SecurityContext): Response
            +findById(Long, SecurityContext): Response
            +remove(Something, SecurityContext): Response
            +update(Something, SecurityContext): Response
        }

        class ApiException {
            +ApiException(int, String)
        }

        interface javax.servlet.Filter {
            {abstract} +init(FilterConfig): void
            {abstract} +doFilter(ServletRequest, ServletResponse, FilterChain): void
            {abstract} +destroy(): void
        }
        javax.servlet.Filter <|.. ApiOriginFilter

        ApiException <|-- NotFoundException

        class java.lang.Exception
        java.lang.Exception <|-- ApiException

    }

@enduml
